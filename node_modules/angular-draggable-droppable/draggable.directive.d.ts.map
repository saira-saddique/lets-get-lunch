{"version":3,"file":"draggable.directive.d.ts","sources":["draggable.directive.d.ts"],"names":[],"mappingssourcesContent":["import { OnInit, ElementRef, Renderer2, EventEmitter, OnDestroy, OnChanges, NgZone, SimpleChanges } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { DraggableHelper } from './draggable-helper.provider';\nexport interface Coordinates {\n    x: number;\n    y: number;\n}\nexport interface DragAxis {\n    x: boolean;\n    y: boolean;\n}\nexport interface SnapGrid {\n    x?: number;\n    y?: number;\n}\nexport declare type ValidateDrag = (coordinates: Coordinates) => boolean;\nexport interface PointerEvent {\n    clientX: number;\n    clientY: number;\n    event: MouseEvent | TouchEvent;\n}\nexport declare class DraggableDirective implements OnInit, OnChanges, OnDestroy {\n    element: ElementRef;\n    private renderer;\n    private draggableHelper;\n    private zone;\n    /**\n     * an object of data you can pass to the drop event\n     */\n    dropData: any;\n    /**\n     * The axis along which the element is draggable\n     */\n    dragAxis: DragAxis;\n    /**\n     * Snap all drags to an x / y grid\n     */\n    dragSnapGrid: SnapGrid;\n    /**\n     * Show a ghost element that shows the drag when dragging\n     */\n    ghostDragEnabled: boolean;\n    /**\n     * Allow custom behaviour to control when the element is dragged\n     */\n    validateDrag: ValidateDrag;\n    /**\n     * The cursor to use when dragging the element\n     */\n    dragCursor: string;\n    /**\n     * Called when the element can be dragged along one axis and has the mouse or pointer device pressed on it\n     */\n    dragPointerDown: EventEmitter<Coordinates>;\n    /**\n     * Called when the element has started to be dragged.\n     * Only called after at least one mouse or touch move event\n     */\n    dragStart: EventEmitter<Coordinates>;\n    /**\n     * Called when the element is being dragged\n     */\n    dragging: EventEmitter<Coordinates>;\n    /**\n     * Called after the element is dragged\n     */\n    dragEnd: EventEmitter<Coordinates>;\n    /**\n     * @hidden\n     */\n    pointerDown: Subject<PointerEvent>;\n    /**\n     * @hidden\n     */\n    pointerMove: Subject<PointerEvent>;\n    /**\n     * @hidden\n     */\n    pointerUp: Subject<PointerEvent>;\n    private eventListenerSubscriptions;\n    /**\n     * @hidden\n     */\n    constructor(element: ElementRef, renderer: Renderer2, draggableHelper: DraggableHelper, zone: NgZone);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    private checkEventListeners();\n    private onMouseDown(event);\n    private onMouseUp(event);\n    private onTouchStart(event);\n    private onTouchEnd(event);\n    private onMouseEnter();\n    private onMouseLeave();\n    private setCssTransform(value);\n    private canDrag();\n    private setCursor(value);\n    private unsubscribeEventListeners();\n}\n"]}